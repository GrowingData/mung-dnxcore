@{
	Layout = null;

	ViewBag.Title = "Notification Preview";

	var template = ViewBag.Template as string;
	var serverEvent = ViewBag.ServerEvent as MungServerEvent;

	var partialPath = ViewBag.TemplatePartialPath as string;

	Exception ex = null;

	string to = "", cc = "", bcc = "", subjectText = "", bodyHtml = "", bodyText = "";
	try {
		var htmlContent = Html.Partial(partialPath);
		var writer = new System.IO.StringWriter();
		htmlContent.WriteTo(writer, new Microsoft.Extensions.WebEncoders.HtmlEncoder());
		var html = writer.ToString();

		var doc = new HtmlDocument();
		doc.LoadHtml(html);

		to = doc.DocumentNode.SelectNodes("//mung-to").FirstOrDefault()?.InnerText;
		cc = doc.DocumentNode.SelectNodes("//mung-cc").FirstOrDefault()?.InnerText;
		bcc = doc.DocumentNode.SelectNodes("//mung-bcc").FirstOrDefault()?.InnerText;
		subjectText = doc.DocumentNode.SelectNodes("//mung-subject").FirstOrDefault()?.InnerText;
		bodyHtml = doc.DocumentNode.SelectNodes("//mung-body-html").FirstOrDefault()?.InnerHtml;
		bodyText = doc.DocumentNode.SelectNodes("//mung-body-text").FirstOrDefault()?.InnerText;

		File.Delete(ViewBag.TemplateRealPath as string);
	} catch (Exception x) {
		ex = x;

	}
}
<html>
<head>
	<style>
		body {
			font-size: 12px;
			font-family: Arial, Helvetica, sans-serif;
		}

		h1 {
			font-size: 14px;
			font-weight: bold;
		}

		h2 {
			font-size: 10px;
			color: #aaa;
		}

		.email-field {
			font-size: 14px;
			padding: 8px;
			background: #eee;
			border: solid 1px #ddd;
			min-height:16px;
		}

		.error-field {
			font-size: 14px;
			padding: 8px;
			background: #e00;
			color: #fff;
			border: solid 1px #eee;
		}

		.email-body {
		}
		pre {
			overflow: hidden;
			background: #eee;
			border: solid 1px #ddd;
		}
	</style>

	<script type="text/javascript">
		var MUNG = MUNG || {};
		MUNG.Loader = {
			startTime: new Date(),
			loadCallbacks: [],
			graphReadyCallbacks: [],
			ready: function (callback) {
				this.loadCallbacks.push(callback);
				return this;
			},
			graphReady: function (initCallback) {
				var scriptBlock = document.currentScript;
				this.graphReadyCallbacks.push({
					elem: scriptBlock,
					callback: initCallback
				});
				//this.load(function () {
				//	var graph = $(scriptBlock).parents(".graph").first();
				//	initCallback(graph);
				//})
			},
			fire: function () {
				console.log("Ready start: " + elapsed + "ms")
				var d = new Date();
				var elapsed = d.getTime() - this.startTime.getTime();

				for (var i = 0; i < this.loadCallbacks.length; i++) {
					this.loadCallbacks[i]();
				}
			}
		};

		// Shortcut functions
		MUNG.ready = function (fn) {
			MUNG.Loader.ready(fn);
		};
		MUNG.graphReady = function (fn) {
			MUNG.Loader.graphReady(fn);
		};

	</script>
</head>

<body>
	@if (ex != null) {
	<h1> An error ocurred rendering the template </h1>

	<h2>MESSAGE:</h2>
	<div class="error-field">@ex.Message.Replace("\r\n", "<br>")</div>

	<h2>STACK:</h2>
	<pre>@ex.StackTrace</pre>

	<h2>JSON:</h2>
	<pre>@JsonConvert.SerializeObject(serverEvent, Formatting.Indented)</pre>

	} else {
	<h1> Your email </h1>


	<h2>TO:</h2>
	<div class="email-field">@to</div>

	<h2>CC:</h2>
	<div class="email-field">
		@cc
	</div>

	<h2>BCC:</h2>
	<div class="email-field">@bcc</div>

	<h2>SUBJECT:</h2>
	<div class="email-field">@subjectText</div>

	<h2>HTML:</h2>
	<div class="email-body email-field">@Html.Raw(bodyHtml)</div>

	<h2>PLAIN TEXT:</h2>
	<pre class="email-body email-field">@Html.Raw(bodyText)</pre>

	<h2>JSON:</h2>
		<pre>@JsonConvert.SerializeObject(serverEvent, Formatting.Indented)</pre>
	}

</body>

</html>



<script type="text/javascript">
	MUNG.ready(function () {

		alert("Loaded");


	});

</script>